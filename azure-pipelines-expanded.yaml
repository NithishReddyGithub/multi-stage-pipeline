name: "$(Build.DefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)"
trigger:
  branches:
    include:
    - main
pool:
  name: linux-pool
  demands:
  - Agent.Name -equals nithish
variables:
- group: nithish-keyvault
- name: dockerRegistryServiceConnection
  value: 'nithish-acr'
- name: aksSubscription
  value: 'nithish-aks'
- name: acrName
  value: 'nithishacrm3wx2'
- name: aksRG
  value: 'nithish-aks-rg'
- name: aksCluster
  value: 'nithish-aks-aks'
stages:
- stage: CI
  displayName: "CI - Build, Test, Dockerize"
  jobs:
  - job: Build_Test
    displayName: "Build and Test"
    steps:
    - task: CmdLine@2
      displayName: "Check Node & npm versions"
      inputs:
        script: |
          node -v
          npm -v
    - task: CmdLine@2
      displayName: "Install dependencies"
      inputs:
        script: |
          npm install
          npm ci
    - task: CmdLine@2
      displayName: "Run unit tests"
      env:
        CI: true
      inputs:
        script: npm test
    - task: PublishTestResults@2
      displayName: "Publish test results (JUnit)"
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: "test-results/junit.xml"
        testRunTitle: "Node.js Unit Tests"
        failTaskOnFailedTests: true
    - task: CmdLine@2
      displayName: "ACR Login"
      inputs:
        script: |
          az acr login --name $(acrName)
    - task: Docker@2
      displayName: "Build & Push Docker Image"
      inputs:
        command: buildAndPush
        repository: $(imageName)
        dockerfile: $(DockerfileName)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          v1
    - task: CmdLine@2
      displayName: "Create Artifact"
      inputs:
        script: |
          mkdir -p artifact
          tar -czf artifact/app.tar.gz app.js server.js package.json package-lock.json
          cp -r manifests/*.yaml artifact/ || echo "No manifests found"
          sudo chmod 777 artifact/*
          ls -R artifact
    - task: PublishBuildArtifacts@1
      displayName: "Publish build artifact"
      inputs:
        PathtoPublish: "artifact"
        ArtifactName: "drop"
        publishLocation: "Container"
- stage: Deploy_Dev
  displayName: "Deploy to Dev AKS"
  dependsOn:
  - CI
  condition: succeeded()
  jobs:
  - deployment: dev_deploy
    displayName: "Dev Deployment"
    environment:
      name: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: current
              artifact: drop
          - task: AzureCLI@2
            displayName: "Authenticate with AKS"
            inputs:
              azureSubscription: $(aksSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials \
                  --resource-group $(aksRG) \
                  --name $(aksCluster) \
                  --overwrite-existing
          - task: CmdLine@2
            displayName: "Ensure Dev namespace"
            inputs:
              script: |
                kubectl get ns dev || kubectl create ns dev
          - task: CmdLine@2
            displayName: "Apply ConfigMap"
            inputs:
              script: |
                if [ -d configs/dev ]; then
                  kubectl -n dev create configmap app-config \
                    --from-file=configs/dev/ \
                    --dry-run=client -o yaml | kubectl apply -f -
                else
                  echo "No dev config files found, skipping ConfigMap."
                fi
          - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
            inputs:
              repository: self
              persistCredentials: true
              clean: true
          - task: CmdLine@2
            inputs:
              script: |
                echo "copying manifests from repo"
                # mkdir -p manifest-files
                ls -R $(Build.SourcesDirectory)/manifests/
                # ls -R manifest-files
                envsubst < $(Build.SourcesDirectory)/manifests/dev-deployment.yaml > $(Build.SourcesDirectory)/manifests/dev-deployment.rendered.yaml
          - task: Kubernetes@1
            displayName: "Deploy to Dev"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(aksSubscription)
              azureResourceGroup: $(aksRG)
              kubernetesCluster: $(aksCluster)
              namespace: 'dev'
              command: apply
              useConfigurationFile: true
              configuration: $(Build.SourcesDirectory)/manifests/dev-deployment.rendered.yaml
          - task: CmdLine@2
            displayName: "Verify Dev rollout"
            inputs:
              script: |
                kubectl -n dev rollout status deployment/my-app --timeout=60s
- stage: Deploy_Staging
  displayName: "Deploy to Staging AKS"
  dependsOn:
  - Deploy_Dev
  condition: succeeded()
  jobs:
  - deployment: staging_deploy
    displayName: "Staging Deployment"
    environment:
      name: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: current
              artifact: drop
          - task: AzureCLI@2
            displayName: "Authenticate with AKS"
            inputs:
              azureSubscription: $(aksSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials \
                  --resource-group $(aksRG) \
                  --name $(aksCluster) \
                  --overwrite-existing
          - task: CmdLine@2
            displayName: "Ensure Staging namespace"
            inputs:
              script: |
                kubectl get ns staging || kubectl create ns staging
          - task: CmdLine@2
            displayName: "Apply ConfigMap"
            inputs:
              script: |
                if [ -d configs/staging ]; then
                  kubectl -n staging create configmap app-config \
                    --from-file=configs/staging/ \
                    --dry-run=client -o yaml | kubectl apply -f -
                else
                  echo "No staging config files found, skipping ConfigMap."
                fi
          - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
            inputs:
              repository: self
              persistCredentials: true
              clean: true
          - task: CmdLine@2
            inputs:
              script: |
                echo "copying manifests from repo"
                # mkdir -p manifest-files
                ls -R $(Build.SourcesDirectory)/manifests/
                # ls -R manifest-files
          - task: Kubernetes@1
            displayName: "Deploy to Staging"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(aksSubscription)
              azureResourceGroup: $(aksRG)
              kubernetesCluster: $(aksCluster)
              namespace: 'staging'
              command: apply
              useConfigurationFile: true
              configuration: $(Build.SourcesDirectory)/manifests/staging-deployment.yaml
          - task: CmdLine@2
            displayName: "Verify Staging rollout"
            inputs:
              script: |
                kubectl -n staging rollout status deployment/my-app --timeout=60s
- stage: Deploy_Production
  displayName: "Deploy to Production AKS"
  dependsOn:
  - Deploy_Staging
  condition: succeeded()
  jobs:
  - deployment: production_deploy
    displayName: "Production Deployment"
    environment:
      name: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: current
              artifact: drop
          - task: AzureCLI@2
            displayName: "Authenticate with AKS"
            inputs:
              azureSubscription: $(aksSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials \
                  --resource-group $(aksRG) \
                  --name $(aksCluster) \
                  --overwrite-existing
          - task: CmdLine@2
            displayName: "Ensure Production namespace"
            inputs:
              script: |
                kubectl get ns production || kubectl create ns production
          - task: CmdLine@2
            displayName: "Apply ConfigMap"
            inputs:
              script: |
                if [ -d configs/production ]; then
                  kubectl -n production create configmap app-config \
                    --from-file=configs/production/ \
                    --dry-run=client -o yaml | kubectl apply -f -
                else
                  echo "No production config files found, skipping ConfigMap."
                fi
          - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
            inputs:
              repository: self
              persistCredentials: true
              clean: true
          - task: CmdLine@2
            inputs:
              script: |
                echo "copying manifests from repo"
                # mkdir -p manifest-files
                ls -R $(Build.SourcesDirectory)/manifests/
                # ls -R manifest-files
          - task: Kubernetes@1
            displayName: "Deploy to Production"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(aksSubscription)
              azureResourceGroup: $(aksRG)
              kubernetesCluster: $(aksCluster)
              namespace: 'production'
              command: apply
              useConfigurationFile: true
              configuration: $(Build.SourcesDirectory)/manifests/production-deployment.yaml
          - task: CmdLine@2
            displayName: "Verify Production rollout"
            inputs:
              script: |
                kubectl -n production rollout status deployment/my-app --timeout=60s

